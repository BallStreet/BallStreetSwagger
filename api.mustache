// tslint:disable
{{>licenseInfo}}

import { Observable } from 'rxjs';
import { AjaxRequest, ajax } from 'rxjs/ajax';
import { map, flatMap } from 'rxjs/operators';
import * as url from "url";
import { Configuration } from "./configuration";

export type RequestOptions = AjaxRequest & { query?: any };

const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    constructor(protected configuration: () => Observable<Configuration>) {
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

export class Api {
    constructor(protected configuration: () => Observable<Configuration>) {
        {{#apiInfo}}{{#apis}}{{#operations}}
        this.{{classVarName}} = new {{classname}}(configuration);{{/operations}}{{/apis}}{{/apiInfo}}
    }
    {{#apiInfo}}{{#apis}}{{#operations}}
    public {{classVarName}}: {{classname}};{{/operations}}{{/apis}}{{/apiInfo}}
}

export var api: Api;
export function setApi(newApi: Api) { api = newApi; }

{{#models}}
{{#model}}{{#isEnum}}{{>modelEnum}}{{/isEnum}}{{^isEnum}}{{>modelGeneric}}{{/isEnum}}{{/model}}
{{/models}}
{{#apiInfo}}{{#apis}}{{#operations}}
/**
 * {{classname}} - ajax call parameter creator{{#description}}
 * {{&description}}{{/description}}
 * @export
 */
export const {{classname}}ParamCreator = function (configuration?: Configuration) {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{=<% %>=}}{<%dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
         {{/allParams}}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: RequestOptions = {}): AjaxRequest {
    {{#allParams}}
    {{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new RequiredError('{{paramName}}','Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }
    {{/required}}
    {{/allParams}}
            const path = `{{{path}}}`{{#pathParams}}
                .replace(`{${"{{baseName}}"}}`, String({{paramName}})){{/pathParams}};
            const urlObj = url.parse(path, true);                
            const requestOptions: RequestOptions = { crossDomain: true, responseType: 'text', method: '{{httpMethod}}', ...options };
            const headerParameter = {} as any;
            const queryParameter = {} as any;
    {{#hasFormParams}}
            const formParams = new url.URLSearchParams();
    {{/hasFormParams}}

    {{#authMethods}}
            // authentication {{name}} required
            {{#isApiKey}}
            {{#isKeyInHeader}}
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("{{keyParamName}}")
					: configuration.apiKey;
                headerParameter["{{keyParamName}}"] = apiKeyValue;
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("{{keyParamName}}")
					: configuration.apiKey;
                queryParameter["{{keyParamName}}"] = apiKeyValue;
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                headerParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            {{/isBasic}}
            {{#isOAuth}}
            // oauth required
            if (configuration && configuration.accessToken) {
				const accessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}])
					: configuration.accessToken;
                headerParameter["Authorization"] = "Bearer " + accessTokenValue;
            }
            {{/isOAuth}}

    {{/authMethods}}
    {{#queryParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
            {{#isCollectionFormatMulti}}
                queryParameter['{{baseName}}'] = {{paramName}};
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
                queryParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]);
            {{/isCollectionFormatMulti}}
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined) {
                {{#isDateTime}}
                queryParameter['{{baseName}}'] = ({{paramName}} as any).toISOString();
                {{/isDateTime}}
                {{^isDateTime}}
                {{#isDate}}
                queryParameter['{{baseName}}'] = ({{paramName}} as any).toISOString();
                {{/isDate}}
                {{^isDate}}
                queryParameter['{{baseName}}'] = {{paramName}};
                {{/isDate}}
                {{/isDateTime}}
            }
            {{/isListContainer}}

    {{/queryParams}}
    {{#headerParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
                headerParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined && {{paramName}} !== null) {
                headerParameter['{{baseName}}'] = String({{paramName}});
            }
            {{/isListContainer}}

    {{/headerParams}}
    {{#formParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
            {{#isCollectionFormatMulti}}
                {{paramName}}.forEach((element) => {
                    formParams.append('{{baseName}}', element as any);
                })
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
                    formParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
            {{/isCollectionFormatMulti}}
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined) {
                formParams.set('{{baseName}}', {{paramName}} as any);
            }
            {{/isListContainer}}

    {{/formParams}}
    {{#hasFormParams}}
            headerParameter['Content-Type'] = 'application/x-www-form-urlencoded';

    {{/hasFormParams}}
    {{#bodyParam}}
            headerParameter['Content-Type'] = 'application/json';

    {{/bodyParam}}
            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete urlObj.search;
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
    {{#hasFormParams}}
            requestOptions.body = formParams.toString();
    {{/hasFormParams}}
    {{#bodyParam}}
            requestOptions.body = JSON.stringify({{paramName}} || {});
    {{/bodyParam}}
            requestOptions.url = url.format(urlObj);

            return requestOptions;
        },
    {{/operation}}
    }
};

/**
 * {{classname}} - functional programming interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 */
export const {{classname}}Fp = function(configuration: () => Observable<Configuration>) {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{=<% %>=}}{<%dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
         {{/allParams}}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: RequestOptions): Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
            return configuration().pipe(
                flatMap(config => {
                    const args = {{classname}}ParamCreator(config).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options);
                    const ajaxFunc = config.ajax || ajax;
                    return ajaxFunc({ ...args, url: "" + (config && config.basePath) + args.url }){{#returnType}}
                        .pipe(
                            map(raw => <string>raw.response),
                            map(json => json ? JSON.parse(json) as {{{returnType}}} : <any>undefined)
                        ){{/returnType}};
                })
            );
        },
    {{/operation}}
    }
};

/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
export class {{classname}} extends BaseAPI {
    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%%dataType%%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof {{classname}}
     */
    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: RequestOptions, configuration?: () => Observable<Configuration>) {
        return {{classname}}Fp(configuration || this.configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options);
    }

    {{/operation}}
}
{{/operations}}{{/apis}}{{/apiInfo}}
